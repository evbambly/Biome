[{"D:\\Projects\\biome\\src\\Map.js":"1","D:\\Projects\\biome\\src\\App.js":"2","D:\\Projects\\biome\\src\\dataGrid.js":"3","D:\\Projects\\biome\\src\\groundData.js":"4","D:\\Projects\\biome\\src\\index.js":"5","D:\\Projects\\biome\\src\\reportWebVitals.js":"6"},{"size":4134,"mtime":1608402395147,"results":"7","hashOfConfig":"8"},{"size":296,"mtime":1608396847137,"results":"9","hashOfConfig":"8"},{"size":8455,"mtime":1608853173840,"results":"10","hashOfConfig":"8"},{"size":6893,"mtime":1608399227438,"results":"11","hashOfConfig":"8"},{"size":500,"mtime":1607693210544,"results":"12","hashOfConfig":"8"},{"size":362,"mtime":1607693210544,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"18vdg5t",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"D:\\Projects\\biome\\src\\Map.js",["28","29"],"import React, { useState, useEffect } from \"react\";\r\nimport { HexGrid, Layout, Hexagon, Text, Path } from \"react-hexgrid\";\r\nimport \"./App.css\";\r\nimport configs from \"./configurations\";\r\nimport {\r\n  getHexIndex,\r\n  getHexData,\r\n  modifyGrid,\r\n  GROUND_TYPES,\r\n  getCoordinates,\r\n  getFlow,\r\n  findConflictingLayout,\r\n} from \"./dataGrid\";\r\n\r\nconst Map = ({ qLength, rLength, mapLayout }) => {\r\n  const config = configs[\"rectangle\"];\r\n  const [hexagons, setHexagons] = useState([]);\r\n\r\n  const layout = config.layout;\r\n  const size = { x: layout.width, y: layout.height };\r\n\r\n  useEffect(() => {\r\n    const plainGrid = getHexData(qLength, rLength);\r\n\r\n    let customGrid = plainGrid;\r\n\r\n    findConflictingLayout(mapLayout);\r\n    mapLayout?.forEach((layer) => {\r\n      customGrid = modifyGrid(customGrid, layer.hexes, layer.type);\r\n    });\r\n\r\n    setHexagons(customGrid);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const hexElements = document.getElementsByClassName(\"editable\");\r\n\r\n    if (hexElements instanceof HTMLCollection) {\r\n      for (let i = 0; i < hexElements.length; i++) {\r\n        const element = hexElements.item(i);\r\n        element.onclick = (e) => {\r\n          const { q, r, s } = getCoordinates(i, qLength);\r\n          const chosenHexIndex = getHexIndex(hexagons, { q, r, s });\r\n          if (chosenHexIndex !== -1) {\r\n            let nextHexagons = JSON.parse(JSON.stringify(hexagons));\r\n            console.log(nextHexagons[chosenHexIndex]);\r\n            if (nextHexagons[chosenHexIndex].isMarked) {\r\n              nextHexagons[chosenHexIndex].isMarked = false;\r\n            } else {\r\n              nextHexagons[chosenHexIndex].isMarked = true;\r\n            }\r\n            setHexagons(nextHexagons);\r\n          }\r\n        };\r\n      }\r\n    }\r\n  }, [hexagons]);\r\n\r\n  const getHexText = (hex) => {\r\n  //  const qText = hex.q < 0 ? \"M\" : \"\";\r\n   // const rText = hex.r < 0 ? \"R\" : \"\";\r\n  //  const sText = hex.s < 0 ? \"=\" : \"\";\r\n    return hex.height ?? \"\";\r\n //  return `${hex.q}${hex.r}${hex.s}`;\r\n   // return qText + rText + sText;\r\n  };\r\n  const setClassnames = (hex) => {\r\n    let className = \"editable\";\r\n\r\n    if (hex.isMarked) {\r\n      className += \" marked\";\r\n    }\r\n\r\n    if (Object.values(GROUND_TYPES).includes(hex.groundType)) {\r\n      className += ` ${hex.groundType}`;\r\n    }\r\n\r\n    hex.className = className;\r\n\r\n    return hex;\r\n  };\r\n  const alertMarked = () => {\r\n    const marked = hexagons\r\n      .filter((hex) => hex.isMarked)\r\n      .map(({ q, r, s }) => {\r\n        return {\r\n          q,\r\n          r,\r\n          s,\r\n        };\r\n      });\r\n\r\n    alert(JSON.stringify(marked));\r\n  };\r\n\r\n  const hexDisplay = hexagons?.map((hex) => setClassnames(hex));\r\n  let flows = []\r\n  hexagons.forEach((hex) => {\r\n    if (hex.flowedTo) {\r\n      const {q, r, s} = hex.flowedTo\r\n      if (!isNaN(q + r + s)) {\r\n        flows.push({ from: hex, to: hex.flowedTo });\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={alertMarked}>Get Marked</button>\r\n      <button onClick={() => setHexagons(getFlow(hexagons))}>Get flow</button>\r\n      <hr />\r\n      <HexGrid width={config.width} height={config.height}>\r\n        <Layout\r\n          size={size}\r\n          flat={layout.flat}\r\n          spacing={layout.spacing}\r\n          origin={config.origin}\r\n        >\r\n          {\r\n            // note: key must be unique between re-renders.\r\n            // using config.mapProps+i makes a new key when the goal template chnages.\r\n            hexDisplay?.map((hex, i) => {\r\n              return (\r\n                <Hexagon\r\n                  className={hex.className}\r\n                  key={config.mapProps + i}\r\n                  q={hex.q}\r\n                  r={hex.r}\r\n                  s={hex.s}\r\n                  id={config.mapProps + i}\r\n                >\r\n                  <Text id={config.mapProps + i * 10}>{getHexText(hex)}</Text>\r\n                </Hexagon>\r\n              );\r\n            })\r\n          }\r\n          {flows?.map((flow) => (\r\n            <Path start={flow?.from} end={flow?.to} />\r\n          ))}\r\n         </Layout>\r\n      </HexGrid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n",["30","31"],"D:\\Projects\\biome\\src\\App.js",[],"D:\\Projects\\biome\\src\\dataGrid.js",[],"D:\\Projects\\biome\\src\\groundData.js",[],"D:\\Projects\\biome\\src\\index.js",[],"D:\\Projects\\biome\\src\\reportWebVitals.js",[],{"ruleId":"32","severity":1,"message":"33","line":33,"column":6,"nodeType":"34","endLine":33,"endColumn":8,"suggestions":"35"},{"ruleId":"32","severity":1,"message":"36","line":57,"column":6,"nodeType":"34","endLine":57,"endColumn":16,"suggestions":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'mapLayout', 'qLength', and 'rLength'. Either include them or remove the dependency array.","ArrayExpression",["42"],"React Hook useEffect has a missing dependency: 'qLength'. Either include it or remove the dependency array.",["43"],"no-native-reassign",["44"],"no-negated-in-lhs",["45"],{"desc":"46","fix":"47"},{"desc":"48","fix":"49"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [mapLayout, qLength, rLength]",{"range":"50","text":"51"},"Update the dependencies array to be: [hexagons, qLength]",{"range":"52","text":"53"},[875,877],"[mapLayout, qLength, rLength]",[1761,1771],"[hexagons, qLength]"]