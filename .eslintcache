[{"D:\\Projects\\biome\\src\\reportWebVitals.js":"1","D:\\Projects\\biome\\src\\MapOptions.js":"2","D:\\Projects\\biome\\src\\Biome\\BiomeMap.js":"3","D:\\Projects\\biome\\src\\Biome\\biome.js":"4","D:\\Projects\\biome\\src\\AirStation\\airStation.js":"5","D:\\Projects\\biome\\src\\Map.js":"6","D:\\Projects\\biome\\src\\AirStation\\ControlPanel\\index.js":"7","D:\\Projects\\biome\\src\\AirStation\\ControlPanel\\ControlPanel.jsx":"8","D:\\Projects\\biome\\src\\index.tsx":"9","D:\\Projects\\biome\\src\\App.tsx":"10","D:\\Projects\\biome\\src\\utils\\MapUtils.js":"11","D:\\Projects\\biome\\src\\utils\\HexUtils.js":"12","D:\\Projects\\biome\\src\\AirStation\\AirStationGame.tsx":"13","D:\\Projects\\biome\\src\\AirStation\\GameEngine\\index.ts":"14","D:\\Projects\\biome\\src\\AirStation\\GameEngine\\map.ts":"15","D:\\Projects\\biome\\src\\AirStation\\GameEngine\\airship.ts":"16","D:\\Projects\\biome\\src\\AirStation\\UIMap\\UIMap.tsx":"17","D:\\Projects\\biome\\src\\AirStation\\utils\\UIMapUtils.ts":"18","D:\\Projects\\biome\\src\\AirStation\\constants\\terrain.ts":"19","D:\\Projects\\biome\\src\\AirStation\\constants\\airStation.ts":"20","D:\\Projects\\biome\\src\\AirStation\\StaticGameSetup\\SavedMaps.ts":"21","D:\\Projects\\biome\\src\\AirStation\\UIMap\\UIHexagon.tsx":"22"},{"size":362,"mtime":1607693210544,"results":"23","hashOfConfig":"24"},{"size":6913,"mtime":1618599787933,"results":"25","hashOfConfig":"24"},{"size":4332,"mtime":1611424411803,"results":"26","hashOfConfig":"27"},{"size":5498,"mtime":1611423661303,"results":"28","hashOfConfig":"27"},{"size":1382,"mtime":1618599767067,"results":"29","hashOfConfig":"24"},{"size":3156,"mtime":1618431902794,"results":"30","hashOfConfig":"24"},{"size":38,"mtime":1616787164097,"results":"31","hashOfConfig":"24"},{"size":193,"mtime":1616787438651,"results":"32","hashOfConfig":"24"},{"size":498,"mtime":1617279375404,"results":"33","hashOfConfig":"24"},{"size":540,"mtime":1618476994859,"results":"34","hashOfConfig":"24"},{"size":972,"mtime":1618599786483,"results":"35","hashOfConfig":"24"},{"size":3636,"mtime":1617360298407,"results":"36","hashOfConfig":"24"},{"size":1531,"mtime":1618614444128,"results":"37","hashOfConfig":"24"},{"size":1163,"mtime":1618578091663,"results":"38","hashOfConfig":"24"},{"size":1549,"mtime":1618612668190,"results":"39","hashOfConfig":"24"},{"size":748,"mtime":1618615384500,"results":"40","hashOfConfig":"24"},{"size":5198,"mtime":1618615550712,"results":"41","hashOfConfig":"24"},{"size":4967,"mtime":1618613499756,"results":"42","hashOfConfig":"24"},{"size":377,"mtime":1618611644464,"results":"43","hashOfConfig":"24"},{"size":181,"mtime":1618599781016,"results":"44","hashOfConfig":"24"},{"size":3481,"mtime":1618665845991,"results":"45","hashOfConfig":"24"},{"size":940,"mtime":1618665856168,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1b6gart",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"18vdg5t",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\biome\\src\\reportWebVitals.js",[],["96","97"],"D:\\Projects\\biome\\src\\MapOptions.js",[],"D:\\Projects\\biome\\src\\Biome\\BiomeMap.js",["98"],"import React, { useState, useEffect } from \"react\";\r\nimport { HexGrid, Layout, Hexagon, Text, Path } from \"react-hexgrid\";\r\nimport \"../App.css\";\r\nimport configs from \"../configurations\";\r\nimport {\r\n  GetHexIndex,\r\n  InitializeRectangularGrid,\r\n  ModifyGrid,\r\n  GetEmptyHexFromRectangleGrid,\r\n  FindConflictingLayout,\r\n} from \"../HexUtils\";\r\nimport Biome from \"./biome\";\r\nimport {GROUND_TYPES} from \"../constants/terrain\"\r\n\r\nconst BiomeMap = ({ qLength, rLength, mapLayout }) => {\r\n  const config = configs[\"rectangle\"];\r\n  const [hexagons, setHexagons] = useState([]);\r\n\r\n  const layout = config.layout;\r\n  const size = { x: layout.width, y: layout.height };\r\n\r\n  useEffect(() => {\r\n    const plainGrid = InitializeRectangularGrid(qLength, rLength);\r\n\r\n    let customGrid = plainGrid;\r\n\r\n    FindConflictingLayout(mapLayout);\r\n    mapLayout?.forEach((layer) => {\r\n      customGrid = ModifyGrid(customGrid, layer.hexes, layer.type);\r\n    });\r\n\r\n    setHexagons(customGrid);\r\n  }, [mapLayout, qLength, rLength]);\r\n\r\n  useEffect(() => {\r\n    const hexElements = document.getElementsByClassName(\"editable\");\r\n\r\n    if (hexElements instanceof HTMLCollection) {\r\n      for (let i = 0; i < hexElements.length; i++) {\r\n        const element = hexElements.item(i);\r\n        element.onclick = (e) => {\r\n          const { q, r, s } = GetEmptyHexFromRectangleGrid(i, qLength);\r\n          const chosenHexIndex = GetHexIndex(hexagons, { q, r, s });\r\n          if (chosenHexIndex !== -1) {\r\n            let nextHexagons = JSON.parse(JSON.stringify(hexagons));\r\n            console.log(nextHexagons[chosenHexIndex]);\r\n            if (nextHexagons[chosenHexIndex].isMarked) {\r\n              nextHexagons[chosenHexIndex].isMarked = false;\r\n            } else {\r\n              nextHexagons[chosenHexIndex].isMarked = true;\r\n            }\r\n            setHexagons(nextHexagons);\r\n          }\r\n        };\r\n      }\r\n    }\r\n  }, [hexagons]);\r\n\r\n  const getHexText = (hex) => {\r\n    return hex.height ?? \"\";\r\n    //  const qText = hex.q < 0 ? \"M\" : \"\";\r\n    // const rText = hex.r < 0 ? \"R\" : \"\";\r\n    //  const sText = hex.s < 0 ? \"=\" : \"\";\r\n    // return qText + rText + sText;\r\n    //  return `${hex.q}${hex.r}${hex.s}`;\r\n  };\r\n  const setClassnames = (hex) => {\r\n    let className = \"editable\";\r\n\r\n    if (hex.isMarked) {\r\n      className += \" marked\";\r\n    }\r\n\r\n    if (Object.values(GROUND_TYPES).includes(hex.groundType)) {\r\n      className += ` ${hex.groundType}`;\r\n    }\r\n\r\n    hex.className = className;\r\n\r\n    return hex;\r\n  };\r\n  const alertMarked = () => {\r\n    let markedString = \"[\";\r\n    hexagons\r\n      .filter((hex) => hex.isMarked)\r\n      .forEach(({ q, r, s }) => {\r\n        markedString += `{q:${q},r:${r},s:${s}},`;\r\n      });\r\n    markedString += \"]\";\r\n    alert(markedString);\r\n  };\r\n\r\n  const hexDisplay = hexagons?.map((hex) => setClassnames(hex));\r\n  let flows = [];\r\n  hexagons.forEach((hex) => {\r\n    if (hex.flowedTo) {\r\n      const { q, r, s } = hex.flowedTo;\r\n      if (!isNaN(q + r + s)) {\r\n        flows.push({ from: hex, to: hex.flowedTo });\r\n      }\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={alertMarked}>Get Marked</button>\r\n      <button onClick={() => setHexagons(Biome.GetFlow(hexagons))}>\r\n        Get flow\r\n      </button>\r\n      <hr />\r\n      <HexGrid width={config.width} height={config.height}>\r\n        <Layout\r\n          size={size}\r\n          flat={layout.flat}\r\n          spacing={layout.spacing}\r\n          origin={config.origin}\r\n        >\r\n          {\r\n            // note: key must be unique between re-renders.\r\n            // using config.mapProps+i makes a new key when the goal template chnages.\r\n            hexDisplay?.map((hex, i) => {\r\n              return (\r\n                <Hexagon\r\n                  className={hex.className}\r\n                  key={config.mapProps + i}\r\n                  q={hex.q}\r\n                  r={hex.r}\r\n                  s={hex.s}\r\n                  id={config.mapProps + i}\r\n                >\r\n                  <Text id={config.mapProps + i * 10}>{getHexText(hex)}</Text>\r\n                </Hexagon>\r\n              );\r\n            })\r\n          }\r\n          {flows?.map((flow) => (\r\n            <Path start={flow?.from} end={flow?.to} />\r\n          ))}\r\n        </Layout>\r\n      </HexGrid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BiomeMap;\r\n",["99","100"],"D:\\Projects\\biome\\src\\Biome\\biome.js",[],"D:\\Projects\\biome\\src\\AirStation\\airStation.js",[],"D:\\Projects\\biome\\src\\Map.js",[],"D:\\Projects\\biome\\src\\AirStation\\ControlPanel\\index.js",[],"D:\\Projects\\biome\\src\\AirStation\\ControlPanel\\ControlPanel.jsx",[],"D:\\Projects\\biome\\src\\index.tsx",[],["101","102"],"D:\\Projects\\biome\\src\\App.tsx",[],"D:\\Projects\\biome\\src\\utils\\MapUtils.js",[],"D:\\Projects\\biome\\src\\utils\\HexUtils.js",[],["103","104"],"D:\\Projects\\biome\\src\\AirStation\\AirStationGame.tsx",[],"D:\\Projects\\biome\\src\\AirStation\\GameEngine\\index.ts",[],"D:\\Projects\\biome\\src\\AirStation\\GameEngine\\map.ts",[],"D:\\Projects\\biome\\src\\AirStation\\GameEngine\\airship.ts",[],"D:\\Projects\\biome\\src\\AirStation\\UIMap\\UIMap.tsx",[],"D:\\Projects\\biome\\src\\AirStation\\utils\\UIMapUtils.ts",[],"D:\\Projects\\biome\\src\\AirStation\\constants\\terrain.ts",[],"D:\\Projects\\biome\\src\\AirStation\\constants\\airStation.ts",[],"D:\\Projects\\biome\\src\\AirStation\\StaticGameSetup\\SavedMaps.ts",[],"D:\\Projects\\biome\\src\\AirStation\\UIMap\\UIHexagon.tsx",[],{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":57,"column":6,"nodeType":"111","endLine":57,"endColumn":16,"suggestions":"112"},{"ruleId":"105","replacedBy":"113"},{"ruleId":"107","replacedBy":"114"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"105","replacedBy":"115"},{"ruleId":"107","replacedBy":"116"},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'qLength'. Either include it or remove the dependency array.","ArrayExpression",["119"],["117"],["118"],["117"],["118"],"no-global-assign","no-unsafe-negation",{"desc":"120","fix":"121"},"Update the dependencies array to be: [hexagons, qLength]",{"range":"122","text":"123"},[1906,1916],"[hexagons, qLength]"]